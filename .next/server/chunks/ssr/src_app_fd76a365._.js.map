{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/groot/Desktop/RIPSSCON2025/src/app/components/WaveScrollEffect.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect } from 'react';\n\nconst WaveScrollEffect = () => {\n  useEffect(() => {\n    const root = document.documentElement;\n    const section1 = document.querySelector('.header'); // Assuming .header is the element to watch for scroll\n\n    const handleScroll = () => {\n      const y = 1 + (window.scrollY || window.pageYOffset);\n      root.style.setProperty('--gradient-percent', y * 4 + \"px\");\n      console.log(y); // Keep console.log for now, can be removed later\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []); // Empty dependency array means this effect runs once on mount and cleans up on unmount\n\n  return null; // This component doesn't render anything itself\n};\n\nexport default WaveScrollEffect;"],"names":[],"mappings":";;;AAEA;AAFA;;AAIA,MAAM,mBAAmB;IACvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,OAAO,SAAS,eAAe;QACrC,MAAM,WAAW,SAAS,aAAa,CAAC,YAAY,sDAAsD;QAE1G,MAAM,eAAe;YACnB,MAAM,IAAI,IAAI,CAAC,OAAO,OAAO,IAAI,OAAO,WAAW;YACnD,KAAK,KAAK,CAAC,WAAW,CAAC,sBAAsB,IAAI,IAAI;YACrD,QAAQ,GAAG,CAAC,IAAI,iDAAiD;QACnE;QAEA,OAAO,gBAAgB,CAAC,UAAU;QAElC,OAAO;YACL,OAAO,mBAAmB,CAAC,UAAU;QACvC;IACF,GAAG,EAAE,GAAG,uFAAuF;IAE/F,OAAO,MAAM,gDAAgD;AAC/D;uCAEe","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/groot/Desktop/RIPSSCON2025/src/app/contact/ContactForm.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport { toast } from 'react-toastify'; // Import toast\n\nconst ContactForm = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '', // Added subject field\n    message: '',\n  });\n  const [loading, setLoading] = useState(false); // Added loading state\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true); // Set loading to true on submission\n\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        toast.success('Message sent successfully!'); // Replaced alert with toast.success\n        // Reset form after submission\n        setFormData({ name: '', email: '', subject: '', message: '' }); // Reset subject field\n      } else {\n        const errorData = await response.json();\n        toast.error(`Failed to send message: ${errorData.message || response.statusText}`); // Replaced alert with toast.error\n      }\n    } catch (error) {\n      console.error('Error submitting contact form:', error);\n      toast.error('An error occurred while sending the message.'); // Replaced alert with toast.error\n    } finally {\n      setLoading(false); // Set loading to false after submission (success or failure)\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4 max-w-lg mx-auto py-8\">\n      <div>\n        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Full Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          required\n          value={formData.name}\n          onChange={handleChange}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Email Address\n        </label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          id=\"email\"\n          required\n          value={formData.email}\n          onChange={handleChange}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n      {/* Added Subject Input Field */}\n      <div>\n        <label htmlFor=\"subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Subject\n        </label>\n        <input\n          type=\"text\"\n          name=\"subject\"\n          id=\"subject\"\n          required\n          value={formData.subject}\n          onChange={handleChange}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Message\n        </label>\n        <textarea\n          name=\"message\"\n          id=\"message\"\n          required\n          rows={4}\n          value={formData.message}\n          onChange={handleChange}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n      <div>\n        <button\n          type=\"submit\"\n          disabled={loading} // Disable button while loading\n          className={`w-full bg-[#002060] hover:bg-blue-500 text-white font-bold py-2 px-4 rounded-md transition duration-300 ease-in-out ${\n            loading ? 'opacity-50 cursor-not-allowed' : ''\n          }`}\n        >\n          {loading ? 'Sending...' : 'Send Message'} {/* Change button text while loading */}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;"],"names":[],"mappings":";;;;AAEA;AACA,kQAAwC,eAAe;AAHvD;;;;AAKA,MAAM,cAAc;IAClB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACvC,MAAM;QACN,OAAO;QACP,SAAS;QACT,SAAS;IACX;IACA,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,sBAAsB;IAErE,MAAM,eAAe,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM;QAChC,YAAY,CAAA,YAAa,CAAC;gBACxB,GAAG,SAAS;gBACZ,CAAC,KAAK,EAAE;YACV,CAAC;IACH;IAEA,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,WAAW,OAAO,oCAAoC;QAEtD,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,gBAAgB;gBAC3C,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,SAAS,EAAE,EAAE;gBACf,mJAAA,CAAA,QAAK,CAAC,OAAO,CAAC,+BAA+B,oCAAoC;gBACjF,8BAA8B;gBAC9B,YAAY;oBAAE,MAAM;oBAAI,OAAO;oBAAI,SAAS;oBAAI,SAAS;gBAAG,IAAI,sBAAsB;YACxF,OAAO;gBACL,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,mJAAA,CAAA,QAAK,CAAC,KAAK,CAAC,CAAC,wBAAwB,EAAE,UAAU,OAAO,IAAI,SAAS,UAAU,EAAE,GAAG,kCAAkC;YACxH;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;YAChD,mJAAA,CAAA,QAAK,CAAC,KAAK,CAAC,iDAAiD,kCAAkC;QACjG,SAAU;YACR,WAAW,QAAQ,6DAA6D;QAClF;IACF;IAEA,qBACE,8OAAC;QAAK,UAAU;QAAc,WAAU;;0BACtC,8OAAC;;kCACC,8OAAC;wBAAM,SAAQ;wBAAO,WAAU;kCAA+C;;;;;;kCAG/E,8OAAC;wBACC,MAAK;wBACL,MAAK;wBACL,IAAG;wBACH,QAAQ;wBACR,OAAO,SAAS,IAAI;wBACpB,UAAU;wBACV,WAAU;;;;;;;;;;;;0BAGd,8OAAC;;kCACC,8OAAC;wBAAM,SAAQ;wBAAQ,WAAU;kCAA+C;;;;;;kCAGhF,8OAAC;wBACC,MAAK;wBACL,MAAK;wBACL,IAAG;wBACH,QAAQ;wBACR,OAAO,SAAS,KAAK;wBACrB,UAAU;wBACV,WAAU;;;;;;;;;;;;0BAId,8OAAC;;kCACC,8OAAC;wBAAM,SAAQ;wBAAU,WAAU;kCAA+C;;;;;;kCAGlF,8OAAC;wBACC,MAAK;wBACL,MAAK;wBACL,IAAG;wBACH,QAAQ;wBACR,OAAO,SAAS,OAAO;wBACvB,UAAU;wBACV,WAAU;;;;;;;;;;;;0BAGd,8OAAC;;kCACC,8OAAC;wBAAM,SAAQ;wBAAU,WAAU;kCAA+C;;;;;;kCAGlF,8OAAC;wBACC,MAAK;wBACL,IAAG;wBACH,QAAQ;wBACR,MAAM;wBACN,OAAO,SAAS,OAAO;wBACvB,UAAU;wBACV,WAAU;;;;;;;;;;;;0BAGd,8OAAC;0BACC,cAAA,8OAAC;oBACC,MAAK;oBACL,UAAU;oBACV,WAAW,CAAC,oHAAoH,EAC9H,UAAU,kCAAkC,IAC5C;;wBAED,UAAU,eAAe;wBAAe;;;;;;;;;;;;;;;;;;AAKnD;uCAEe","debugId":null}}]
}